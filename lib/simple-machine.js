// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(root) {
  return root.SimpleMachine = (function() {

    SimpleMachine.InvalidEvent = (function(_super) {

      __extends(InvalidEvent, _super);

      function InvalidEvent() {
        return InvalidEvent.__super__.constructor.apply(this, arguments);
      }

      return InvalidEvent;

    })(Error);

    function SimpleMachine(state) {
      this.state = state;
      this.transitions = {};
      this.callbacks = [];
    }

    SimpleMachine.prototype.on = function(event, callback, context) {
      if (context != null) {
        callback = function() {
          return callback.call(context);
        };
      }
      if (this.callbacks[event] != null) {
        this.callbacks[event].push(callback);
      } else {
        this.callbacks[event] = [callback];
      }
      return this;
    };

    SimpleMachine.prototype.when = function(event, transitions) {
      this.transitions[event] = transitions;
      return this;
    };

    SimpleMachine.prototype.trigger = function(event) {
      var callback, callbacks, _i, _len;
      if (this.canTrigger(event)) {
        this.state = this.transitions[event][this.state];
        callbacks = this.callbacks[this.state] + this.callbacks['any'];
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback();
        }
        return true;
      } else {
        return false;
      }
    };

    SimpleMachine.prototype.canTrigger = function(event) {
      if (this.transitions[event] == null) {
        throw new SimpleMachine.InvalidEvent;
      }
      return this.transitions[event][this.state] != null;
    };

    SimpleMachine.prototype.events = function() {
      var event, _results;
      _results = [];
      for (event in this.transitions) {
        _results.push(event);
      }
      return _results;
    };

    SimpleMachine.prototype["in"] = function(other) {
      return this.state === other;
    };

    return SimpleMachine;

  })();
})(typeof 'exports' === 'undefined' ? window : exports);
